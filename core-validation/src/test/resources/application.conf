akka{
  loggers = [akka.testkit.TestEventListener]
  logLevel = "INFO"
  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]
  actor {
    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }
    serialization-bindings {
      "java.io.Serializable" = kryo
      "com.horbowicz.lunch.orders.command.Command" = kryo
      "com.horbowicz.lunch.orders.query.Query" = kryo
      "com.horbowicz.lunch.orders.event.Event" = kryo
    }
    serialize-messages = on
    serialize-creators = off
    kryo {
      # Possibles values for type are: graph or nograph
      # graph supports serialization of object graphs with shared nodes
      # and cyclic references, but this comes at the expense of a small overhead
      # nograph does not support object grpahs with shared nodes, but is usually faster
      type = "graph"


      # Possible values for idstrategy are:
      # default, explicit, incremental, automatic
      #
      # default - slowest and produces bigger serialized representation. Contains fully-
      # qualified class names (FQCNs) for each class
      #
      # explicit - fast and produces compact serialized representation. Requires that all
      # classes that will be serialized are pre-registered using the "mappings" and "classes"
      # sections. To guarantee that both sender and receiver use the same numeric ids for the same
      # classes it is advised to provide exactly the same entries in the "mappings" section
      #
      # incremental - fast and produces compact serialized representation. Support optional
      # pre-registering of classes using the "mappings" and "classes" sections. If class is
      # not pre-registered, it will be registered dynamically by picking a next available id
      # To guarantee that both sender and receiver use the same numeric ids for the same
      # classes it is advised to pre-register them using at least the "classes" section
      #
      # automatic - Contains fully-qualified class names (FQCNs) for each class that is not
      # pre-registered in the "mappings" and "classes" section

      idstrategy = "incremental"

      # Define a default size for byte buffers used during serialization
      buffer-size = 4096

      # The serialization byte buffers are doubled as needed until they exceed maxBufferSize and an exception is thrown. Can be -1 for no maximum.
      max-buffer-size = -1

      # Define a custom queue builder, by default (unset) ConcurrentLinkedQueue is used.
      # Look at the main documentation for a concrete example:
      #
      # custom-queue-builder = "a.b.c.KryoQueueBuilder"

      # If set, akka uses manifests to put a class name
      # of the top-level object into each message
      use-manifests = true

      # Enable transparent compression of serialized messages
      # accepted values are: off | lz4 | deflate
      compression = off

      # Log implicitly registered classes. Useful, if you want to know all classes
      # which are serialized
      implicit-registration-logging = true

      # If enabled, Kryo logs a lot of information about serialization process.
      # Useful for debugging and lowl-level tweaking
      kryo-trace = false

      # If enabled, Kryo uses internally a map detecting shared nodes.
      # This is a preferred mode for big object graphs with a lot of nodes.
      # For small object graphs (e.g. below 10 nodes) set it to false for
      # better performance.
      kryo-reference-map = true

      # Define mappings from a fully qualified class name to a numeric id.
      # Smaller ids lead to smaller sizes of serialized representations.
      #
      # This section is mandatory for idstartegy=explicit
      # This section is optional  for idstartegy=incremental
      # This section is ignored   for idstartegy=default
      #
      # The smallest possible id should start at 20 (or even higher), because
      # ids below it are used by Kryo internally e.g. for built-in Java and
      # Scala types
      mappings {
        "akka.persistence.inmemory.journal.AllPersistenceIdsSubscriberRegistry$AllPersistenceIdsSubscriberTerminated" = 1758004618
        "com.horbowicz.lunch.orders.event.order.OrderOpened" = 145858269
        "java.time.LocalDateTime" = 2040105335
        "java.time.LocalDate" = 1429429251
        "akka.persistence.inmemory.dao.InMemoryJournalStorage$WriteList" = 1526692668
        "akka.event.EventStreamUnsubscriber$Register" = 1025316592
        "akka.actor.RepointableActorRef" = 2140619144
        "akka.persistence.inmemory.dao.InMemoryJournalStorage$Messages" = 684528851
        "com.horbowicz.lunch.orders.command.order.OpenOrder" = 59715248
        "java.time.LocalTime" = 1690980614
        "akka.persistence.inmemory.journal.InMemoryJournal$EventsByPersistenceIdRequest" = 1763885975
        "akka.persistence.inmemory.dao.InMemorySnapshotStorage$SnapshotForMaxSequenceNr" = 573751045
        "akka.persistence.inmemory.dao.InMemoryJournalStorage$HighestSequenceNr" = 64179110
        "scalaz.$minus$bslash$div" = 538085912
        "com.horbowicz.lunch.orders.domain.order.error.ImpossibleDeliveryTime$" = 805563937
        "akka.actor.PoisonPill$" = 362890532
        "akka.actor.Terminated" = 1606422442
        "akka.persistence.inmemory.dao.InMemoryJournalStorage$Delete" = 1835825698
        "akka.actor.RepointableActorRef" = 2140619144
        "akka.persistence.inmemory.dao.InMemoryJournalStorage$Messages" = 684528851
        "akka.persistence.inmemory.journal.EventsByPersistenceIdRegistry$EventsByPersistenceIdSubscriberTerminated" = 1365223680
        "akka.persistence.inmemory.journal.EventsByTagSubscriberRegistry$EventsByTagSubscriberTerminated" = 1967414688
        "akka.persistence.inmemory.journal.EventsByPersistenceIdTagSubscriberRegistry$EventsByPersistenceIdTagSubscriberTerminated" = 1431325030
        "akka.persistence.inmemory.dao.InMemoryJournalStorage$HighestSequenceNr" = 64179110
        "scalaz.$minus$bslash$div" = 538085912
        "scala.collection.immutable.$colon$colon" = 2141238113
        "akka.persistence.inmemory.serialization.Serialized" = 2118321596
        "[B" = 1390098794
        "scala.None$" = 1482670802
        "akka.persistence.inmemory.journal.InMemoryJournal$EventAppended" = 1963927042
        "akka.persistence.query.EventEnvelope" = 1681269025
        "scalaz.$bslash$div$minus" = 777974584
        "com.horbowicz.lunch.orders.domain.order.error.OrderNotFound" = 16076992
        "akka.actor.LocalActorRef" = 568738174
        "akka.event.Logging$StandardOutLogger" = 1431234439
        "akka.event.EventStreamUnsubscriber$UnregisterIfNoMoreSubscribedChannels" = 326936632
        "java.math.BigDecimal" = 671779816
        "java.math.MathContext" = 945489163
        "java.math.RoundingMode" = 506428949
        "com.horbowicz.lunch.orders.command.order.AddOrderItem" = 653193371
        "scala.math.BigDecimal" = 5957167
        "com.horbowicz.lunch.orders.event.order.OrderItemAdded" = 1390472702
        "com.horbowicz.lunch.orders.event.order.OrderPlaced" = 1256575472
        "com.horbowicz.lunch.orders.event.order.OrderPlaced" = 1256575472
        "scala.runtime.BoxedUnit" = 811360602
        "com.horbowicz.lunch.orders.query.order.GetOrderDetails" = 1543650395
        "com.horbowicz.lunch.orders.read.order.OrdersDetails$Order" = 1805989209
        "scala.collection.immutable.Nil$" = 2013895718
        "com.horbowicz.lunch.orders.read.order.OrdersDetails$Order$Status$Open$" = 1773474785
        "com.horbowicz.lunch.orders.read.order.OrdersDetails$OrderItem" = 1254573867
        "com.horbowicz.lunch.orders.domain.order.error.UnfilledOrder$" = 782796442
        "com.horbowicz.lunch.orders.command.order.PlaceOrder" = 1194910045
        "com.horbowicz.lunch.orders.command.order.PlaceOrder" = 1194910045
        "com.horbowicz.lunch.orders.domain.order.error.InvalidOrderId$" = 1483680280
        "com.horbowicz.lunch.orders.query.order.GetActiveOrders$" = 639407838
        "com.horbowicz.lunch.orders.read.order.OrdersView$Order" = 1640223459
      }

      # Define a set of fully qualified class names for
      # classes to be used for serialization.
      # The ids for those classes will be assigned automatically,
      # but respecting the order of declaration in this section
      #
      # This section is optional  for idstartegy=incremental
      # This section is ignored   for idstartegy=default
      # This section is optional  for idstartegy=explicit
      classes = [
        "akka.actor.Terminated"
        "scalaz.$minus$bslash$div"
        "scalaz.$bslash$div$minus"
        # fully.qualified.classname1
        # fully.qualified.classname2
      ]
    }
  }
  persistence{
    journal{
      plugin = "inmemory-journal"
    }

    snapshot-store{
      plugin = "inmemory-snapshot-store"
    }
  }
}